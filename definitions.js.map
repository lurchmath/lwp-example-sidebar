{"version":3,"sources":["definitions.litcoffee"],"names":["mathQuillToOpenMath","slice","registerCategory","registerCodeForm","group","verbose","test","contentAsText","result","message","children","length","meaning","window","OMNode","openmath","encode","registerTranslator","trim","replace","contentAsHTML","decode","get","toJavaScript","toPython","toR","OM","prototype","infix","prefix","special","_this","func","child","apply","results","i","len","ref","this","op","arguments","call","join","code","type","value","name","simpleEncode","a","b","x","arg","base","e","nodes","parsed","selector","toParse","$","contentNodes","find","add","filter","mathQuillToMeaning","error","mathQuillParser","parse"],"mappings":"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","file":"definitions.js","sourcesContent":["\n# Definitions for the Sidebar Example App\n\nThe main file for the app is located [here](lwp-example-sidebar.litcoffee).\n\nThis file contains the definitions of code forms and categories as well as\ntheir validation functions, plus translation routines for various languages.\n\nThis file should be better documented, but it's actually pretty boring.  It\njust provides a lot of data to functions defined in the main file, linked to\nabove.\n\n## Registering basic code forms and categories\n\n    registerCategory 'Data', [\n        registerCodeForm 'Variable', ( group, verbose ) ->\n            variableRE = /^[a-zA-Z_][a-zA-Z_0-9]*$/\n            if variableRE.test group.contentAsText()\n                result : 'valid'\n                message : 'This is a valid variable name.'\n            else\n                result : 'invalid'\n                message : 'This is not a valid variable name.'\n                verbose : 'It must begin with a Roman letter or an\n                    underscore, and contain only Roman letters, underscores,\n                    or Arabic digits.'\n        registerCodeForm 'Number', ( group, verbose ) ->\n            numberRE = /^[+-]?([0-9]+\\.[0-9]*|[0-9]*\\.?[0-9]+)$/\n            if numberRE.test group.contentAsText()\n                result : 'valid'\n                message : 'This is a valid number.'\n            else\n                result : 'invalid'\n                message : 'This is not a valid number.'\n                verbose : 'Numbers may contain only Arabic digits and one\n                    optional decimal point, plus optionally a leading + or\n                    - sign.'\n        registerCodeForm 'Text', ( group, verbose ) ->\n            if group.children.length > 0\n                result : 'invalid'\n                message : 'Text data cannot have any inner structure.'\n                verbose : 'This text data has at least one inner structure,\n                    but it should be just text.  Remove the inner\n                    structures to fix this problem.'\n            else\n                result : 'valid'\n                message : 'This is valid text.'\n    ]\n    registerCategory 'Simple actions', [\n        registerCodeForm 'Store a value',\n            [ 'Variable', 'Number/Text/Mathematical expression' ]\n        registerCodeForm 'Pick a random integer',\n            [ 'Number/Variable', 'Number/Variable' ]\n        registerCodeForm 'Mathematical expression', ( group, verbose ) ->\n            meaning = mathQuillToOpenMath group\n            if meaning not instanceof window.OMNode\n                return result : 'invalid', message : meaning\n            result : 'valid'\n            message : 'This is a valid mathematical expression'\n            openmath : meaning.encode()\n    ]\n    registerCategory 'Input/Output', [\n        registerCodeForm 'Display a value',\n            [ 'Number/Variable/Text/Mathematical expression' ]\n        registerCodeForm 'Request a value from the user',\n            [ 'Variable/Text', 'Variable/Text' ]\n    ]\n    registerCategory 'Control flow', [\n        registerCodeForm 'Make a decision', [\n            'Variable/Mathematical expression'\n            'Store a value/Display a value/Request a value from the user'\n            'Store a value/Display a value/Request a value from the user'\n        ]\n        registerCodeForm 'For each integer in a range', [\n            'Variable'\n            'Number/Variable'\n            'Number/Variable'\n            'Store a value/Display a value/Make a decision'\n        ]\n    ]\n\n## Registering English boilerplate\n\n    registerTranslator 'Variable', 'en', 'example',\n        'the variable <Variable>x</Variable>'\n    registerTranslator 'Number', 'en', 'example',\n        'the number <Number>5</Number>'\n    registerTranslator 'Text', 'en', 'example',\n        'the text <Text>Hello, World!</Text>'\n    registerTranslator 'Mathematical expression', 'en', 'example',\n        'the result of <Mathematical\n         expression><span class=\"math\">x^2+y^2</span></Mathematical\n         expression>'\n    registerTranslator 'Store a value', 'en', 'example',\n        '<Store a value>Let the variable <Variable>x</Variable>\n         have the value <Number>3</Number>.</Store a value>'\n    registerTranslator 'Pick a random integer', 'en', 'example',\n        '<Pick a random integer>a random integer between <Number>1</Number>\n         and <Number>10</Number> (inclusive)</Pick a random integer>'\n    registerTranslator 'Display a value', 'en', 'example',\n        '<Display a value>Display the value of <Variable>x</Variable> to the\n         user.</Display a value>'\n    registerTranslator 'Request a value from the user', 'en', 'example',\n        '<Request a value from the user>Prompt the user for the value of the\n         variable <Variable>N</Variable>, by saying <Text>What\\'s your\n         name?</Text> and providing the default value of <Text>John</Text>\n         (if the interface supports default\n         values).</Request a value from the user>'\n    registerTranslator 'Make a decision', 'en', 'example',\n        '<Make a decision>Check to see if <Variable>P</Variable> is true.\n         <br>If so, do this: <Store a value>Let <Variable>x</Variable> be\n         the number <Number>100</Number>.</Store a value>\n         <br>If not, do this: <Store a value>Let <Variable>y</Variable> be\n         the text <Text>Hello</Text>.</Store a value></Make a decision>'\n    registerTranslator 'For each integer in a range', 'en', 'example',\n        '<For each integer in a range>Let <Variable>i</Variable> count from\n         <Number>1</Number> to <Number>5</Number>, and each step of the\n         way, <Display a value>show the user the value of <Mathematical\n         expression><span class=\"math\">\\\\frac{i^2}{2}</span></Mathematical\n         expression></Display a value>.</For each integer in a range>'\n\n## Registering English translation\n\n    registerTranslator 'Variable', 'en', 'explanation', ( group ) ->\n        \"the value of the variable #{group.contentAsText().trim()}\"\n    registerTranslator 'Number', 'en', 'explanation', ( group ) ->\n        \"the number #{group.contentAsText().trim()}\"\n    registerTranslator 'Text', 'en', 'explanation', ( group ) ->\n        escaped = group.contentAsText().replace /&/g, '&amp;'\n        .replace /</g, '&lt;'\n        .replace />/g, '&gt;'\n        .replace /\"/g, '&quot;'\n        .replace /'/g, '&apos;'\n        \"the text <b>#{escaped}</b>\"\n    registerTranslator 'Mathematical expression', 'en', 'explanation',\n    ( group ) ->\n        \"the result of #{group.contentAsHTML()}\"\n    registerTranslator 'Store a value', 'en', 'explanation',\n        'Let __A__ be __B__.'\n    registerTranslator 'Pick a random integer', 'en', 'explanation',\n        'a random integer between __A__ and __B__ (inclusive)'\n    registerTranslator 'Display a value', 'en', 'explanation',\n        'Display __A__ to the user.'\n    registerTranslator 'Request a value from the user', 'en', 'explanation',\n        'Prompt the user for the value of __A__, providing __B__ as the\n         default value, if the interface supports that.'\n    registerTranslator 'Make a decision', 'en', 'explanation',\n        'If __A__ is true, then do this:\n         <ul><li>__B__</li></ul>\n         Otherwise, do this:\n         <ul><li>__C__</li></ul>'\n    registerTranslator 'For each integer in a range', 'en', 'explanation',\n        'While __A__ counts from __B__ to __C__ (inclusive), do:\n         <ul><li>__D__</li></ul>'\n    registerTranslator 'COMMENT', 'en', 'explanation', 'Note: __A__'\n\n## Registering JavaScript translation\n\n    registerTranslator 'Variable', 'javascript', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Number', 'javascript', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Text', 'javascript', 'code', ( group ) ->\n        escaped = group.contentAsText()\n            .replace /\\\\/g, '\\\\\\\\'\n            .replace /\"/g, '\\\\\"'\n            .replace /\\n/g, '\\\\n'\n        \"\\\"#{escaped}\\\"\"\n    registerTranslator 'Mathematical expression', 'javascript', 'code',\n    ( group ) ->\n        openmath = window.OMNode.decode \\\n            group.get( 'validationResult' ).openmath\n        if openmath not instanceof window.OMNode\n            \"undefined /* #{openmath} */\" # includes failure reason\n        else\n            openmath.toJavaScript()\n    registerTranslator 'Store a value', 'javascript', 'code',\n        '__A__ = __B__;'\n    registerTranslator 'Pick a random integer', 'javascript', 'code',\n        '( Math.random() * ( __B__ - ( __A__ ) ) + __A__ ) | 0'\n    registerTranslator 'Display a value', 'javascript', 'code',\n        'alert( __A__ );'\n    registerTranslator 'Request a value from the user', 'javascript',\n        'code', 'prompt( __A__, __B__ )'\n    registerTranslator 'Make a decision', 'javascript', 'code',\n        'if ( __A__ ) {\\n  __B__\\n} else {\\n  __C__\\n}'\n    registerTranslator 'For each integer in a range', 'javascript', 'code',\n        'for ( var __A__ = __B__ ; __A__ <= __C__ ; __A__++ ) {\\n  __D__\\n}'\n    registerTranslator 'COMMENT', 'javascript', 'code', '// __A__'\n\n## Registering Python translation\n\nThese translations assume the code begins with `import math` and\n`import random`.\n\n    registerTranslator 'Variable', 'python', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Number', 'python', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Text', 'python', 'code', ( group ) ->\n        escaped = group.contentAsText()\n            .replace /\\\\/g, '\\\\\\\\'\n            .replace /\"/g, '\\\\\"'\n            .replace /\\n/g, '\\\\n'\n        \"\\\"#{escaped}\\\"\"\n    registerTranslator 'Mathematical expression', 'python', 'code',\n    ( group ) ->\n        openmath = window.OMNode.decode \\\n            group.get( 'validationResult' ).openmath\n        if openmath not instanceof window.OMNode\n            'None'\n        else\n            openmath.toPython()\n    registerTranslator 'Store a value', 'python', 'code',\n        '__A__ = __B__'\n    registerTranslator 'Pick a random integer', 'python', 'code',\n        'random.randint( __B__, __A__ )'\n    registerTranslator 'Display a value', 'python', 'code',\n        'print __A__'\n    registerTranslator 'Request a value from the user', 'python',\n        'code', 'raw_input( __A__ )'\n    registerTranslator 'Make a decision', 'python', 'code',\n        'if __A__:\\n  __B__\\nelse:\\n  __C__'\n    registerTranslator 'For each integer in a range', 'python', 'code',\n        'for __A__ in range( __B__, __C__ + 1 ):\\n  __D__'\n    registerTranslator 'COMMENT', 'python', 'code', '# __A__'\n\n## Registering R translation\n\n    registerTranslator 'Variable', 'r', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Number', 'r', 'code', ( group ) ->\n        group.contentAsText().trim()\n    registerTranslator 'Text', 'r', 'code', ( group ) ->\n        escaped = group.contentAsText()\n            .replace /\\\\/g, '\\\\\\\\'\n            .replace /\"/g, '\\\\\"'\n            .replace /\\n/g, '\\\\n'\n        \"\\\"#{escaped}\\\"\"\n    registerTranslator 'Mathematical expression', 'r', 'code',\n    ( group ) ->\n        openmath = window.OMNode.decode \\\n            group.get( 'validationResult' ).openmath\n        if openmath not instanceof window.OMNode\n            'NULL'\n        else\n            openmath.toR()\n    registerTranslator 'Store a value', 'r', 'code',\n        '__A__ <- __B__'\n    registerTranslator 'Pick a random integer', 'r', 'code',\n        'sample( (__A__):(__B__), 1 )'\n    registerTranslator 'Display a value', 'r', 'code',\n        'print( __A__ )'\n    registerTranslator 'Request a value from the user', 'r', 'code',\n        'readline( __A__ )'\n    registerTranslator 'Make a decision', 'r', 'code',\n        'if ( __A__ ) {\\n  __B__\\n} else {\\n  __C__\\n}'\n    registerTranslator 'For each integer in a range', 'r', 'code',\n        'for ( __A__ in (__B__):(__C__) ) {\\n  __D__\\n}'\n    registerTranslator 'COMMENT', 'r', 'code', '# __A__'\n\n## Utilities used in the functions above\n\nFunctions for converting OpenMath data structures into code that computes\nthem, in various languages.\n\n    OM::toJavaScript = ->\n        special = ( func ) =>\n            func ( child.toJavaScript() for child in @children[1...] )...\n        infix = ( op ) => special ( code... ) -> code.join op\n        prefix = ( op ) => special ( code... ) -> \"#{op}(#{code.join ','})\"\n        result = switch @type\n            when 'i', 'f', 'st', 'ba' then \"#{@value}\"\n            when 'v' then switch @name\n                when '\\u03c0' then 'Math.PI' # pi\n                when 'e' then 'Math.exp(1)'\n                else @name\n            when 'sy' then switch @simpleEncode()\n                when 'units.degrees' then '(Math.PI/180)'\n                when 'units.percent' then '0.01'\n                when 'units.dollars' then '1'\n            when 'a' then switch @children[0].simpleEncode()\n                when 'arith1.plus' then infix '+'\n                when 'arith1.minus' then infix '-'\n                when 'arith1.times' then infix '*'\n                when 'arith1.divide' then infix '/'\n                when 'arith1.power' then prefix 'Math.pow'\n                when 'arith1.root'\n                    special ( a, b ) -> \"Math.pow(#{b},1/(#{a}))\"\n                when 'arith1.abs' then prefix 'Math.abs'\n                when 'arith1.unary_minus' then prefix '-'\n                when 'relation1.eq' then infix '=='\n                when 'relation1.approx'\n                    special ( a, b ) -> \"(Math.abs((#{a})-(#{b}))<0.01)\"\n                when 'relation1.neq' then infix '!='\n                when 'relation1.lt' then infix '<'\n                when 'relation1.gt' then infix '>'\n                when 'relation1.le' then infix '<='\n                when 'relation1.ge' then infix '>='\n                when 'logic1.not' then prefix '!'\n                when 'transc1.sin' then prefix 'Math.sin'\n                when 'transc1.cos' then prefix 'Math.cos'\n                when 'transc1.tan' then prefix 'Math.tan'\n                when 'transc1.cot'\n                    special ( x ) -> \"(1/Math.tan(#{x}))\"\n                when 'transc1.sec'\n                    special ( x ) -> \"(1/Math.cos(#{x}))\"\n                when 'transc1.csc'\n                    special ( x ) -> \"(1/Math.sin(#{x}))\"\n                when 'transc1.arcsin' then prefix 'Math.asin'\n                when 'transc1.arccos' then prefix 'Math.acos'\n                when 'transc1.arctan' then prefix 'Math.atan'\n                when 'transc1.arccot'\n                    special ( x ) -> \"Math.atan(1/(#{x}))\"\n                when 'transc1.arcsec'\n                    special ( x ) -> \"Math.acos(1/(#{x}))\"\n                when 'transc1.arccsc'\n                    special ( x ) -> \"Math.asin(1/(#{x}))\"\n                when 'transc1.ln' then prefix 'Math.log'\n                when 'transc1.log'\n                    special ( x ) -> \"(Math.log(#{arg})/Math.log(#{base}))\"\n                # Maybe later I will come back and implement these, but this\n                # is just a demo app, so there is no need to get fancy.\n                # when 'integer1.factorial'\n                # when 'arith1.sum'\n                # when 'calculus1.int'\n                # when 'calculus1.defint'\n                # when 'limit1.limit'\n        result ? \"undefined /* Could not evaluate #{@simpleEncode()} */\"\n    OM::toPython = ->\n        special = ( func ) =>\n            func ( child.toPython() for child in @children[1...] )...\n        infix = ( op ) => special ( code... ) -> code.join op\n        prefix = ( op ) => special ( code... ) -> \"#{op}(#{code.join ','})\"\n        result = switch @type\n            when 'i', 'f', 'st', 'ba' then \"#{@value}\"\n            when 'v' then switch @name\n                when '\\u03c0' then 'math.pi' # pi\n                when 'e' then 'math.exp(1)'\n                else @name\n            when 'sy' then switch @simpleEncode()\n                when 'units.degrees' then '(math.pi/180)'\n                when 'units.percent' then '0.01'\n                when 'units.dollars' then '1'\n            when 'a' then switch @children[0].simpleEncode()\n                when 'arith1.plus' then infix '+'\n                when 'arith1.minus' then infix '-'\n                when 'arith1.times' then infix '*'\n                when 'arith1.divide' then infix '/'\n                when 'arith1.power' then infix '**'\n                when 'arith1.root'\n                    special ( a, b ) -> \"#{b}**(1/(#{a}))\"\n                when 'arith1.abs' then prefix 'math.fabs'\n                when 'arith1.unary_minus' then prefix '-'\n                when 'relation1.eq' then infix '=='\n                when 'relation1.approx'\n                    special ( a, b ) -> \"(math.fabs((#{a})-(#{b}))<0.01)\"\n                when 'relation1.neq' then infix '!='\n                when 'relation1.lt' then infix '<'\n                when 'relation1.gt' then infix '>'\n                when 'relation1.le' then infix '<='\n                when 'relation1.ge' then infix '>='\n                when 'logic1.not' then prefix 'not'\n                when 'transc1.sin' then prefix 'math.sin'\n                when 'transc1.cos' then prefix 'math.cos'\n                when 'transc1.tan' then prefix 'math.tan'\n                when 'transc1.cot'\n                    special ( x ) -> \"(1/math.tan(#{x}))\"\n                when 'transc1.sec'\n                    special ( x ) -> \"(1/math.cos(#{x}))\"\n                when 'transc1.csc'\n                    special ( x ) -> \"(1/math.sin(#{x}))\"\n                when 'transc1.arcsin' then prefix 'math.asin'\n                when 'transc1.arccos' then prefix 'math.acos'\n                when 'transc1.arctan' then prefix 'math.atan'\n                when 'transc1.arccot'\n                    special ( x ) -> \"math.atan(1/(#{x}))\"\n                when 'transc1.arcsec'\n                    special ( x ) -> \"math.acos(1/(#{x}))\"\n                when 'transc1.arccsc'\n                    special ( x ) -> \"math.asin(1/(#{x}))\"\n                when 'transc1.ln', 'transc1.log' then prefix 'math.log'\n                # Maybe later I will come back and implement these, but this\n                # is just a demo app, so there is no need to get fancy.\n                # when 'integer1.factorial'\n                # when 'arith1.sum'\n                # when 'calculus1.int'\n                # when 'calculus1.defint'\n                # when 'limit1.limit'\n        result ? 'None'\n    OM::toR = ->\n        special = ( func ) =>\n            func ( child.toR() for child in @children[1...] )...\n        infix = ( op ) => special ( code... ) -> code.join op\n        prefix = ( op ) => special ( code... ) -> \"#{op}(#{code.join ','})\"\n        result = switch @type\n            when 'i', 'f', 'st', 'ba' then \"#{@value}\"\n            when 'v' then switch @name\n                when '\\u03c0' then 'pi' # pi\n                when 'e' then 'exp(1)'\n                else @name\n            when 'sy' then switch @simpleEncode()\n                when 'units.degrees' then '(pi/180)'\n                when 'units.percent' then '0.01'\n                when 'units.dollars' then '1'\n            when 'a' then switch @children[0].simpleEncode()\n                when 'arith1.plus' then infix '+'\n                when 'arith1.minus' then infix '-'\n                when 'arith1.times' then infix '*'\n                when 'arith1.divide' then infix '/'\n                when 'arith1.power' then infix '^'\n                when 'arith1.root'\n                    special ( a, b ) -> \"(#{b})^(1/(#{a}))\"\n                when 'arith1.abs' then prefix 'abs'\n                when 'arith1.unary_minus' then prefix '-'\n                when 'relation1.eq' then infix '=='\n                when 'relation1.approx'\n                    special ( a, b ) -> \"(abs((#{a})-(#{b}))<0.01)\"\n                when 'relation1.neq' then infix '!='\n                when 'relation1.lt' then infix '<'\n                when 'relation1.gt' then infix '>'\n                when 'relation1.le' then infix '<='\n                when 'relation1.ge' then infix '>='\n                when 'logic1.not' then prefix '!'\n                when 'transc1.sin' then prefix 'sin'\n                when 'transc1.cos' then prefix 'cos'\n                when 'transc1.tan' then prefix 'tan'\n                when 'transc1.cot'\n                    special ( x ) -> \"(1/tan(#{x}))\"\n                when 'transc1.sec'\n                    special ( x ) -> \"(1/cos(#{x}))\"\n                when 'transc1.csc'\n                    special ( x ) -> \"(1/sin(#{x}))\"\n                when 'transc1.arcsin' then prefix 'asin'\n                when 'transc1.arccos' then prefix 'acos'\n                when 'transc1.arctan' then prefix 'atan'\n                when 'transc1.arccot' then special ( x ) -> \"atan(1/(#{x}))\"\n                when 'transc1.arcsec' then special ( x ) -> \"acos(1/(#{x}))\"\n                when 'transc1.arccsc' then special ( x ) -> \"asin(1/(#{x}))\"\n                when 'transc1.ln', 'transc1.log' then prefix 'log'\n                # Maybe later I will come back and implement these, but this\n                # is just a demo app, so there is no need to get fancy.\n                # when 'integer1.factorial'\n                # when 'arith1.sum'\n                # when 'calculus1.int'\n                # when 'calculus1.defint'\n                # when 'limit1.limit'\n        result ? 'NULL'\n\nA function for discerning the OpenMath meaning of a group in the document.\nEither a string is returned (as an error) or an OMNode instance, as the\nmeaning.  If the group has anything but exactly one MathQuill instance in it\nthen an error is returned for that reason.  Other errors are parsing\nrelated.\n\n    mathQuillToOpenMath = ( group ) ->\n        nodes = $ group.contentNodes()\n        selector = '.mathquill-rendered-math'\n        nodes = nodes.find( selector ).add nodes.filter selector\n        if nodes.length is 0 then return 'No math expresion found'\n        if nodes.length > 1 then return 'Too many math expressions found'\n        try\n            toParse = window.mathQuillToMeaning nodes.get 0\n        catch e\n            return \"Error reading math expression to text: #{e?.message}\"\n        try\n            parsed = mathQuillParser.parse( toParse )?[0]\n        catch e\n            return \"Error interpreting math expression: #{e?.message}\"\n        if parsed instanceof window.OMNode then return parsed\n        \"Could not parse this mathematical text:\n            #{toParse?.join? ' '} -- Error: #{parsed}\"\n"]}